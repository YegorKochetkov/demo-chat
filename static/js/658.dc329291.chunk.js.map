{"version":3,"file":"static/js/658.dc329291.chunk.js","mappings":"oQACA,EAA0B,yBAA1B,EAAmE,+BAAnE,EAAqH,kCAArH,EAAuK,+BAAvK,EAAwN,iC,mBCW3MA,GAA2BC,EAAAA,EAAAA,OAAK,YAAa,IAAD,IAATC,EAAS,EAATA,GACxCC,GAAUC,EAAAA,EAAAA,GAAeC,EAAAA,IAAaC,MAAK,SAACH,GAAD,OAAaA,EAAQD,KAAOA,CAA5B,IAC3CK,GAAWC,EAAAA,EAAAA,KAEjB,OACE,oBACEC,UAAWC,EAEXC,QAAS,kBAAMJ,GAASK,EAAAA,EAAAA,IAAmBV,GAAlC,EAHX,SAKGC,IACC,iCACE,gBAAKM,UAAWC,EAAhB,UACE,SAACG,EAAA,EAAD,CAAYC,MAAOX,EAAQY,OAAQC,SAAUb,EAAQa,cAGvD,eAAIP,UAAWC,EAAf,gBACGP,QADH,IACGA,OADH,EACGA,EAASc,QAGZ,cAAGR,UAAWC,EAAd,gBACGP,QADH,IACGA,GADH,UACGA,EAASe,UAAgB,OAAPf,QAAO,IAAPA,OAAA,EAAAA,EAASe,SAASC,QAAS,UADhD,aACG,EAAiDC,QAGpD,cAAGX,UAAWC,EAAd,UACGW,EAAAA,EAAAA,GAAa,UACZlB,EAAQe,SAASf,EAAQe,SAASC,OAAS,UAD/B,aACZ,EAA+CG,UAC/C,eApBHpB,EA2BV,I,UC7CD,EAA8B,iCCIjBqB,GAAwBtB,EAAAA,EAAAA,OAAK,WACxC,OAA0BuB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMnB,GAAWC,EAAAA,EAAAA,KAYjB,OAVAmB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAYC,YAAW,WAC3BtB,GAASuB,EAAAA,EAAAA,IAAeL,GACzB,GAAE,KAEH,OAAO,WACLM,aAAaH,EACd,CACF,GAAE,CAACrB,EAAUkB,KAGZ,kBACEO,KAAK,SACLC,YAAY,2BACZxB,UAAWC,EACXwB,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAWV,EAASU,EAAMC,OAAOH,MAAjC,GAGf,IC3BD,EAA+B,mCAA/B,EAA8F,gDAA9F,EAAqK,2CAArK,EAAqO,yCAArO,EAAoS,0CAApS,EAAwW,8CAAxW,EAA8a,4C,4ECcjaI,EAAyB,WACpC,IAAM/B,GAAWC,EAAAA,EAAAA,KACX+B,GAAWC,EAAAA,EAAAA,MACXC,GAAkBrC,EAAAA,EAAAA,GAAesC,EAAAA,IACjCC,GAAWvC,EAAAA,EAAAA,GAAeC,EAAAA,IAEhC,GAAgDmB,EAAAA,EAAAA,UAAwBmB,GAAxE,eAAOC,EAAP,KAAyBC,EAAzB,KACAC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,IAEhD,IAAMO,GAAU9C,EAAAA,EAAAA,GAAe+C,EAAAA,IACzBC,GAAchD,EAAAA,EAAAA,GAAeiD,EAAAA,IAVO,8CAY1C,6GAEUC,EAAAA,EAAAA,MAFV,OAGI/C,GAASgD,EAAAA,EAAAA,OACThD,GAASK,EAAAA,EAAAA,IAAmB,OAC5BkC,aAAaU,QACbjB,EAAS,KANb,gDAQIkB,MAAM,qBAAuBT,KAAKC,UAAU,KAAIS,OARpD,0DAZ0C,sBAuC1C,OAfA/B,EAAAA,EAAAA,YAAU,WACRkB,GAAoBc,EAAAA,EAAAA,GAAmBhB,GACxC,GAAE,CAACA,KAEJhB,EAAAA,EAAAA,YAAU,WACR,IAAMiC,EAAqBjB,EAASkB,QAAO,SAAC1D,GAC1C,OAAOA,EAAQc,KAAK6C,cAAcC,SAASX,IACtCjD,EAAQe,SAAS8C,MAClB,SAACC,GAAD,OAAaA,EAAQ7C,KAAK0C,cAAcC,SAASX,EAAjD,GAEL,IAEDP,EAAoBe,EACrB,GAAE,CAACjB,EAAUS,KAGZ,mBAAO3C,UACLgC,EACI/B,EAAsB,IAAMA,EAC5BA,EAHN,WAKE,oBAAQD,UAAWC,EAAnB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAACG,EAAA,EAAD,CAAYC,MAAOoC,EAAQnC,QAAUD,EAAOE,UAAU,IACrDkC,EAAQjC,MACT,mBACEe,KAAK,SACLf,KAAK,WACLR,UAAWC,EACXC,QArDgC,iDAyDpC,SAACY,EAAD,QAEF,kBAAMd,UAAWC,EAAjB,WACE,eAAID,UAAWC,EAAf,mBAGCkC,EAAiBsB,KAAI,SAAC/D,GAAD,OACpB,SAACH,EAAD,CACEE,GAAIC,EAAQD,IACPC,EAAQD,GAHK,SAS7B,C,qECtFD,EAAuB,yBAAvB,EAAqE,uCAArE,EAAkI,wCAAlI,EAA+L,uCAA/L,EAAoP,gC,SCOvOW,GAA8BZ,EAAAA,EAAAA,OAAK,YAA0B,IAAvBa,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACxD,OACE,qBAASP,UAAWC,EAApB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBACEyD,IAAKrD,EACLsD,IAAI,OACJ3D,UAAWC,OAGf,gBAAKD,UACHO,EACIN,EACAA,MAKX,G,uDC1BM,IAAMW,EAAgB,SAAEgD,EAAcC,GAC3C,GAAKD,EAAL,CAIA,IAcME,EAAe,IAAIC,KAAKC,eAAe,QAdW,CACtDC,IAAK,UACLC,MAAO,QACPC,KAAM,YAYFC,EAAe,IAAIL,KAAKC,eAAe,QATW,CACtDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNE,KAAM,UACNC,OAAQ,YAKJC,EAAe,IAAIC,KAAKZ,GAE9B,MAAe,UAAXC,EAEAC,EAAaD,OAAOU,GAIT,SAAXV,EAEAO,EAAaP,OAAOU,GAKtBA,EAAaE,UAjCd,CAmCF,C","sources":["webpack://demo-chat/./src/components/Contact/Contact.module.scss?0aeb","components/Contact/Contact.tsx","webpack://demo-chat/./src/components/SearchInput/SearchInput.module.scss?d390","components/SearchInput/SearchInput.tsx","webpack://demo-chat/./src/components/ContactsList/ContactsList.module.scss?9b70","components/ContactsList/ContactsList.tsx","webpack://demo-chat/./src/components/UserAvatar/UserAvatar.module.scss?c16f","components/UserAvatar/UserAvatar.tsx","helpers/dateFormatter.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__+0W6J\",\"contact__name\":\"Contact_contact__name__2wp33\",\"contact__message\":\"Contact_contact__message__m-cCS\",\"contact__date\":\"Contact_contact__date__c1ebN\",\"contact__avatar\":\"Contact_contact__avatar__Ei+rO\"};","import React, { memo } from 'react';\nimport { getContacts } from '../../store/contactsSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { dateFormatter } from '../../helpers/dateFormatter';\nimport { UserAvatar } from '../UserAvatar';\nimport styles from './Contact.module.scss';\nimport { setSelectedContact } from \"../../store/selectedContact\";\n\ntype Props = {\n  id: number,\n};\n\nexport const Contact: React.FC<Props> = memo(({ id }) => {\n  const contact = useAppSelector(getContacts).find((contact) => contact.id === id);\n  const dispatch = useAppDispatch();\n\n  return (\n    <article\n      className={styles.contact}\n      key={id}\n      onClick={() => dispatch(setSelectedContact(id))}\n    >\n      {contact && (\n        <>\n          <div className={styles.contact__avatar}>\n            <UserAvatar photo={contact.avatar} isOnline={contact.isOnline} />\n          </div>\n\n          <h3 className={styles.contact__name}>\n            {contact?.name}\n          </h3>\n\n          <p className={styles.contact__message}>\n            {contact?.messages[contact?.messages.length - 1]?.text}\n          </p>\n\n          <p className={styles.contact__date}>\n            {dateFormatter(\n              contact.messages[contact.messages.length - 1]?.createdAt,\n              'short'\n            )}\n          </p>\n        </>\n      )}\n    </article>\n  );\n});","// extracted by mini-css-extract-plugin\nexport default {\"searchInput\":\"SearchInput_searchInput__wtR0U\"};","import React, { memo, useEffect, useState } from 'react';\nimport { useAppDispatch } from '../../store/hooks';\nimport { setSearchQuery } from '../../store/searchQuerySlice';\nimport styles from './SearchInput.module.scss';\n\nexport const SearchInput: React.FC = memo(() => {\n  const [query, setQuery] = useState('');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      dispatch(setSearchQuery(query));\n    }, 500);\n\n    return () => {\n      clearTimeout(timeoutId);\n    }\n  }, [dispatch, query]);\n\n  return (\n    <input\n      type='search'\n      placeholder='Search or start new chat'\n      className={styles.searchInput}\n      value={query}\n      onChange={(event) => setQuery(event.target.value)}\n    />\n  );\n});","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__dyKnI\",\"contactsList_selectedChat\":\"ContactsList_contactsList_selectedChat__IjiUY\",\"contactsList__header\":\"ContactsList_contactsList__header__E1CjU\",\"contactsList__main\":\"ContactsList_contactsList__main__B8aZv\",\"contactsList__title\":\"ContactsList_contactsList__title__aScd6\",\"contactsList__userBlock\":\"ContactsList_contactsList__userBlock__hb-Ml\",\"contactsList__signOut\":\"ContactsList_contactsList__signOut__9x8qz\"};","import React, { useEffect, useState } from 'react';\nimport { ContactType, getContacts } from '../../store/contactsSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { getProfile, setUserLogoOut } from '../../store/profileSlice';\nimport { getSearchQuery } from '../../store/searchQuerySlice';\nimport { Contact } from '../Contact';\nimport { SortContactsByDate } from '../../helpers/SortContactsByDate';\nimport { UserAvatar } from '../UserAvatar/UserAvatar';\nimport { SearchInput } from \"../SearchInput\";\nimport { getSelectedContact, setSelectedContact } from \"../../store/selectedContact\";\nimport styles from './ContactsList.module.scss';\nimport { logout } from \"../../helpers/handleAuth\";\nimport { useNavigate } from \"react-router-dom\";\nimport photo from '../../assets/user_icon.png';\n\nexport const ContactsList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const selectedContact = useAppSelector(getSelectedContact);\n  const contacts = useAppSelector(getContacts);\n\n  const [contactsToRender, setContactsToRender] = useState<ContactType[]>(contacts);\n  localStorage.setItem('contacts', JSON.stringify(contacts));\n\n  const profile = useAppSelector(getProfile);\n  const searchQuery = useAppSelector(getSearchQuery);\n\n  async function handleLogout() {\n    try {\n      await logout();\n      dispatch(setUserLogoOut());\n      dispatch(setSelectedContact(null));\n      localStorage.clear();\n      navigate('/');\n    } catch (err: any) {\n      alert('Failed to logout: ' + JSON.stringify(err.code));\n    }\n  };\n\n  useEffect(() => {\n    setContactsToRender(SortContactsByDate(contacts));\n  }, [contacts]);\n\n  useEffect(() => {\n    const sortedContactsList = contacts.filter((contact) => {\n      return contact.name.toLowerCase().includes(searchQuery)\n        || contact.messages.some(\n          (message) => message.text.toLowerCase().includes(searchQuery)\n        );\n    });\n\n    setContactsToRender(sortedContactsList);\n  }, [contacts, searchQuery]);\n\n  return (\n    <aside className={\n      selectedContact\n        ? styles.contactsList + ' ' + styles.contactsList_selectedChat\n        : styles.contactsList\n    }>\n      <header className={styles.contactsList__header}>\n        <div className={styles.contactsList__userBlock}>\n          <UserAvatar photo={profile.avatar || photo} isOnline={true} />\n          {profile.name}\n          <button\n            type='button'\n            name='sign out'\n            className={styles.contactsList__signOut}\n            onClick={handleLogout}\n          />\n        </div>\n\n        <SearchInput />\n      </header>\n      <main className={styles.contactsList__main}>\n        <h2 className={styles.contactsList__title}>\n          Chats\n        </h2>\n        {contactsToRender.map((contact) =>\n          <Contact\n            id={contact.id}\n            key={contact.id}\n          />\n        )}\n      </main>\n    </aside>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"UserAvatar_user__n0sV2\",\"user__statusOnline\":\"UserAvatar_user__statusOnline__Cfo1o\",\"user__statusOffline\":\"UserAvatar_user__statusOffline__kyfOY\",\"user__photoWrapper\":\"UserAvatar_user__photoWrapper__PBvF8\",\"user__photo\":\"UserAvatar_user__photo__IElG5\"};","import React, { memo } from 'react';\nimport styles from './UserAvatar.module.scss';\n\ntype Props = {\n  photo: string,\n  isOnline: boolean,\n};\n\nexport const UserAvatar: React.FC<Props> = memo(({ photo, isOnline }) => {\n  return (\n    <section className={styles.user}>\n      <div className={styles.user__photoWrapper}>\n        <img\n          src={photo}\n          alt='User'\n          className={styles.user__photo}\n        />\n      </div>\n      <div className={\n        isOnline \n          ? styles.user__statusOnline\n          : styles.user__statusOffline\n        }\n      />\n    </section>\n  );\n});","export const dateFormatter = ( date: string, format: string ) => {\n  if (!date) {\n    return;\n  }\n\n  const userListDateOptions: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n\n  const chatRoomDateOptions: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'numeric',\n    year: '2-digit',\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n\n  const userListDate = new Intl.DateTimeFormat('en-US', userListDateOptions);\n  const chatRoomDate = new Intl.DateTimeFormat('en-US', chatRoomDateOptions);\n  const dateToFormat = new Date(date);\n\n  if (format === 'short') {\n    return (\n      userListDate.format(dateToFormat)  \n    );\n  }\n\n  if (format === 'long') {\n    return (\n      chatRoomDate.format(dateToFormat)  \n    );\n  }\n\n  return (\n    dateToFormat.toString()\n  );\n};"],"names":["Contact","memo","id","contact","useAppSelector","getContacts","find","dispatch","useAppDispatch","className","styles","onClick","setSelectedContact","UserAvatar","photo","avatar","isOnline","name","messages","length","text","dateFormatter","createdAt","SearchInput","useState","query","setQuery","useEffect","timeoutId","setTimeout","setSearchQuery","clearTimeout","type","placeholder","value","onChange","event","target","ContactsList","navigate","useNavigate","selectedContact","getSelectedContact","contacts","contactsToRender","setContactsToRender","localStorage","setItem","JSON","stringify","profile","getProfile","searchQuery","getSearchQuery","logout","setUserLogoOut","clear","alert","code","SortContactsByDate","sortedContactsList","filter","toLowerCase","includes","some","message","map","src","alt","date","format","userListDate","Intl","DateTimeFormat","day","month","year","chatRoomDate","hour","minute","dateToFormat","Date","toString"],"sourceRoot":""}