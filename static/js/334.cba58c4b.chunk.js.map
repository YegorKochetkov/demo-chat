{"version":3,"file":"static/js/334.cba58c4b.chunk.js","mappings":"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","sources":["webpack://demo-chat/./src/components/Message/Message.module.scss?ab33","components/Message/Message.tsx","helpers/getFakeAnswer.ts","webpack://demo-chat/./src/components/MessageInput/MessageInput.module.scss?1ee1","components/MessageInput/MessageInput.tsx","webpack://demo-chat/./src/components/ChatRoom/ChatRoom.module.scss?9214","components/ChatRoom/ChatRoom.tsx","webpack://demo-chat/./src/components/UserAvatar/UserAvatar.module.scss?c16f","components/UserAvatar/UserAvatar.tsx","helpers/dateFormatter.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__fVrsq\",\"message__text\":\"Message_message__text__3qOOw\",\"message__myMessage\":\"Message_message__myMessage__3jC02\",\"message__date\":\"Message_message__date__2Jn3R\",\"message__myMessageDate\":\"Message_message__myMessageDate__g0MDW\"};","import React, { memo, useEffect, useRef } from 'react';\r\nimport { MessageType } from '../../store/contactsSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { dateFormatter } from '../../helpers/dateFormatter';\r\nimport styles from './Message.module.scss';\r\nimport { getSelectedContact } from \"../../store/selectedContact\";\r\n\r\ntype Props = {\r\n  message: MessageType,\r\n};\r\n\r\nexport const Message: React.FC<Props> = memo(({ message }) => {\r\n  const selectedContact = useAppSelector(getSelectedContact);\r\n\r\n  const lastMessage = useRef<null | HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    lastMessage.current?.scrollIntoView();\r\n  }, [selectedContact]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.message}\r\n      ref={lastMessage}\r\n    >\r\n      <p className={message.isMyMessage\r\n        ? styles.message__myMessage\r\n        : styles.message__text\r\n      }>\r\n        {message.text}\r\n      </p>\r\n      <p className={message.isMyMessage\r\n        ? styles.message__myMessageDate\r\n        : styles.message__date\r\n      }>\r\n        {dateFormatter(message.createdAt, 'long')}\r\n      </p>\r\n    </div>\r\n  );\r\n});","const API_URL = 'https://api.chucknorris.io/jokes/random';\n\ntype Response = {\n  'icon_url' : string,\n  'id' : string,\n  'url' : string,\n  'value' : string\n};\n\nexport const getFakeAnswers = async (): Promise<Response> => {\n  try {\n    const response = await fetch(`${API_URL}`, { method: 'GET' });\n\n    return response.json();\n  } catch(error) {\n    throw error;\n  }\n}","// extracted by mini-css-extract-plugin\nexport default {\"messageInput\":\"MessageInput_messageInput__YGClS\",\"messageInput__field\":\"MessageInput_messageInput__field__u+FZB\",\"messageInput__submit\":\"MessageInput_messageInput__submit__3CuaW\"};","import React, { memo, useState } from 'react';\nimport {\n  addMessage,\n  MessageType,\n} from '../../store/contactsSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { getFakeAnswers } from '../../helpers/getFakeAnswer';\nimport styles from './MessageInput.module.scss';\nimport { getSelectedContact } from \"../../store/selectedContact\";\n\nexport const MessageInput: React.FC = memo(() => {\n  const selectedContact = useAppSelector(getSelectedContact);\n  const dispatch = useAppDispatch();\n\n  const [message, setMessage] = useState('');\n\n  const handleMessageSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (selectedContact && message.trim()) {\n      const newMessage: MessageType = {\n        userId: selectedContact,\n        isMyMessage: true,\n        text: message,\n        createdAt: new Date().toJSON(),\n      }\n\n      dispatch(addMessage(newMessage));\n      setMessage('');\n\n      setTimeout(async () => {\n        const fakeAnswer = await getFakeAnswers();\n        const newMessage: MessageType = {\n          userId: selectedContact,\n          isMyMessage: false,\n          text: fakeAnswer.value,\n          createdAt: new Date().toJSON(),\n        }\n\n        dispatch(addMessage(newMessage));\n      }, 10_000);\n    }\n  };\n\n  return (\n    <form\n      action=''\n      className={styles.messageInput}\n      onSubmit={(event) => handleMessageSubmit(event)}\n    >\n      <input\n        type='text'\n        placeholder='Type your message'\n        className={styles.messageInput__field}\n        value={message}\n        onChange={(event) => setMessage(event.target.value)}\n      />\n      <button\n        type='submit'\n        name='send message'\n        className={styles.messageInput__submit}\n      />\n    </form>\n  );\n});","// extracted by mini-css-extract-plugin\nexport default {\"chatRoom\":\"ChatRoom_chatRoom__1x0FC\",\"chatRoom_selectedChat\":\"ChatRoom_chatRoom_selectedChat__OI2HK\",\"chatRoom__header\":\"ChatRoom_chatRoom__header__iQjXJ\",\"chatRoom__footer\":\"ChatRoom_chatRoom__footer__vp6Sa\",\"chatRoom__main\":\"ChatRoom_chatRoom__main__fHlKW\",\"chatRoom__userInfo\":\"ChatRoom_chatRoom__userInfo__H3zqD\",\"chatRoom__backButton\":\"ChatRoom_chatRoom__backButton__6KH55\"};","import { getContacts } from '../../store/contactsSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { UserAvatar } from '../UserAvatar/UserAvatar';\nimport { Message } from \"../Message\";\nimport { MessageInput } from \"../MessageInput\";\nimport styles from './ChatRoom.module.scss';\nimport { useMemo } from 'react';\nimport { getSelectedContact, setSelectedContact } from \"../../store/selectedContact\";\n\nexport const ChatRoom: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedContactId = useAppSelector(getSelectedContact);\n  const contacts = useAppSelector(getContacts);\n  \n  const contact = useMemo(() => {\n    return contacts.find((contact) => selectedContactId === contact.id)\n  }, [selectedContactId, contacts]);\n\n  return (\n    <>\n    {contact && \n      <section className={\n        selectedContactId\n          ? styles.chatRoom + ' ' + styles.chatRoom_selectedChat\n          : styles.chatRoom\n      }>\n        <header className={styles.chatRoom__header}>\n          <UserAvatar photo={contact.avatar} isOnline={contact.isOnline} />\n          <p className={styles.chatRoom__userInfo}>\n            {contact.name}\n          </p>\n          <button\n            type='button'\n            name='back to contacts'\n            className={styles.chatRoom__backButton}\n            onClick={() => dispatch(setSelectedContact(null))}\n          />\n        </header>\n\n        <main className={styles.chatRoom__main}>\n          {contact.messages.map((message, index) => \n            <Message\n              key={message.userId + index}\n              message={message}\n            />\n          )}\n        </main>\n\n        <footer className={styles.chatRoom__footer}>\n          <MessageInput />\n        </footer>\n      </section>\n    }\n    </>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"UserAvatar_user__n0sV2\",\"user__statusOnline\":\"UserAvatar_user__statusOnline__Cfo1o\",\"user__statusOffline\":\"UserAvatar_user__statusOffline__kyfOY\",\"user__photoWrapper\":\"UserAvatar_user__photoWrapper__PBvF8\",\"user__photo\":\"UserAvatar_user__photo__IElG5\"};","import React, { memo } from 'react';\nimport styles from './UserAvatar.module.scss';\n\ntype Props = {\n  photo: string,\n  isOnline: boolean,\n};\n\nexport const UserAvatar: React.FC<Props> = memo(({ photo, isOnline }) => {\n  return (\n    <section className={styles.user}>\n      <div className={styles.user__photoWrapper}>\n        <img\n          src={photo}\n          alt='User'\n          className={styles.user__photo}\n        />\n      </div>\n      <div className={\n        isOnline \n          ? styles.user__statusOnline\n          : styles.user__statusOffline\n        }\n      />\n    </section>\n  );\n});","export const dateFormatter = ( date: string, format: string ) => {\n  if (!date) {\n    return;\n  }\n\n  const userListDateOptions: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n\n  const chatRoomDateOptions: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'numeric',\n    year: '2-digit',\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n\n  const userListDate = new Intl.DateTimeFormat('en-US', userListDateOptions);\n  const chatRoomDate = new Intl.DateTimeFormat('en-US', chatRoomDateOptions);\n  const dateToFormat = new Date(date);\n\n  if (format === 'short') {\n    return (\n      userListDate.format(dateToFormat)  \n    );\n  }\n\n  if (format === 'long') {\n    return (\n      chatRoomDate.format(dateToFormat)  \n    );\n  }\n\n  return (\n    dateToFormat.toString()\n  );\n};"],"names":["Message","memo","message","selectedContact","useAppSelector","getSelectedContact","lastMessage","useRef","useEffect","current","scrollIntoView","className","styles","ref","isMyMessage","text","dateFormatter","createdAt","getFakeAnswers","fetch","method","response","json","MessageInput","dispatch","useAppDispatch","useState","setMessage","action","onSubmit","event","preventDefault","trim","newMessage","userId","Date","toJSON","addMessage","setTimeout","fakeAnswer","value","handleMessageSubmit","type","placeholder","onChange","target","name","ChatRoom","selectedContactId","contacts","getContacts","contact","useMemo","find","id","UserAvatar","photo","avatar","isOnline","onClick","setSelectedContact","messages","map","index","src","alt","date","format","userListDate","Intl","DateTimeFormat","day","month","year","chatRoomDate","hour","minute","dateToFormat","toString"],"sourceRoot":""}